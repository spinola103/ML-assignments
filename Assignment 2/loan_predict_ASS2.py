# -*- coding: utf-8 -*-
"""Loan_predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aQnyYy_3sVAgloWKX_VLK4CVu8t-AMnq
"""

import pandas as pd


df = pd.read_csv('train.csv')




df['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])
df['Income Stability'] = df['Income Stability'].fillna(df['Income Stability'].mode()[0])
df['Type of Employment'] = df['Type of Employment'].fillna(df['Type of Employment'].mode()[0])
df['Has Active Credit Card'] = df['Has Active Credit Card'].fillna(df['Has Active Credit Card'].mode()[0])
df['Property Location'] = df['Property Location'].fillna(df['Property Location'].mode()[0])


df['Income (USD)'] = df['Income (USD)'].fillna(df['Income (USD)'].mean())
df['Current Loan Expenses (USD)'] = df['Current Loan Expenses (USD)'].fillna(df['Current Loan Expenses (USD)'].mean())
df['Dependents'] = df['Dependents'].fillna(df['Dependents'].mean())
df['Credit Score'] = df['Credit Score'].fillna(df['Credit Score'].mean())
df['Property Age'] = df['Property Age'].fillna(df['Property Age'].mean())
df['Loan Sanction Amount (USD)'] = df['Loan Sanction Amount (USD)'].fillna(df['Loan Sanction Amount (USD)'].mean())


print("Missing values handled successfully!")
print(df.head())

print(df.isnull().sum())

from sklearn.preprocessing import LabelEncoder


categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
print("Categorical columns:", categorical_cols)


label_encoder = LabelEncoder()
binary_cols = [col for col in categorical_cols if df[col].nunique() == 2]

for col in binary_cols:
    df[col] = label_encoder.fit_transform(df[col])

print("Label Encoded columns:", binary_cols)


multi_cat_cols = [col for col in categorical_cols if col not in binary_cols]

df = pd.get_dummies(df, columns=multi_cat_cols, drop_first=True)

print("One-Hot Encoded columns:", multi_cat_cols)

from sklearn.preprocessing import StandardScaler

# Step 1: Drop the target
X = df.drop('Loan Sanction Amount (USD)', axis=1)
y = df['Loan Sanction Amount (USD)']

# Step 2: Select only numeric columns for scaling
numeric_features = X.select_dtypes(include=['int64', 'float64']).columns
X_numeric = X[numeric_features]

# Step 3: Apply StandardScaler on numeric columns only
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_numeric)

# If you need it back as DataFrame:
X_scaled_df = pd.DataFrame(X_scaled, columns=numeric_features)

# Optional: Add back categorical columns if needed (like for later ML pipeline)
categorical_cols = X.select_dtypes(include='object').columns
X_final = pd.concat([X_scaled_df, X[categorical_cols].reset_index(drop=True)], axis=1)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt



# Sample the data to prevent memory crash
df_sample = df.sample(n=1000, random_state=1) if len(df) > 1000 else df.copy()

# 1. Missing Values Heatmap
plt.figure(figsize=(12, 5))
sns.heatmap(df_sample.isnull(), cbar=False, cmap='plasma')
plt.title('Missing Values (Sample)')
plt.show()

# 2. Count plots for categorical features
categorical_cols = ['Gender', 'Income Stability', 'Type of Employment', 'Co-Applicant']
for col in categorical_cols:
    if col in df_sample.columns:
        plt.figure(figsize=(6, 4))
        sns.countplot(data=df_sample, x=col)
        plt.title(f'Count of {col}')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

# 3. Histograms for numerical features
numerical_cols = ['Income (USD)', 'Age', 'Loan Amount Request (USD)',
                  'Loan Sanction Amount (USD)', 'Current Loan Expenses (USD)',
                  'Credit Score', 'No. of Defaults', 'Property Age', 'Property Price']
for col in numerical_cols:
    if col in df_sample.columns:
        plt.figure(figsize=(6, 4))
        sns.histplot(df_sample[col].dropna(), kde=True, bins=30)
        plt.title(f'Distribution of {col}')
        plt.tight_layout()
        plt.show()

# 4. Correlation Heatmap
plt.figure(figsize=(10, 7))
corr_matrix = df_sample.select_dtypes(include='number').corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".1f")
plt.title("Correlation Heatmap (Sample)")
plt.show()

# 5. Scatter plot between Income and Loan Sanction Amount
if 'Income (USD)' in df_sample.columns and 'Loan Sanction Amount (USD)' in df_sample.columns:
    plt.figure(figsize=(6, 5))
    sns.scatterplot(data=df_sample, x='Income (USD)', y='Loan Sanction Amount (USD)', hue='Gender')
    plt.title("Income vs Loan Sanction Amount")
    plt.tight_layout()
    plt.show()

# Debt to Income Ratio
df['Debt_Income_Ratio'] = df['Current Loan Expenses (USD)'] / df['Income (USD)']

# Loan to Property Value Ratio
df['Loan_Property_Ratio'] = df['Loan Amount Request (USD)'] / df['Property Price']

# Age Bucket (Young, Middle-aged, Senior)
df['Age_Group'] = pd.cut(df['Age'], bins=[0, 25, 45, 100], labels=['Young', 'Middle-aged', 'Senior'])

# Is First Loan (based on defaults)
df['First_Loan'] = df['No. of Defaults'].apply(lambda x: 1 if x == 0 else 0)

print(df.isnull().sum())

from sklearn.model_selection import train_test_split

# First split: train (70%) and temp (30%)
X_train, X_temp, y_train, y_temp = train_test_split(X_scaled, y, test_size=0.30, random_state=42)

# Second split: validation (15%) and test (15%) from temp
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.50, random_state=42)

print("Training set size:", X_train.shape)
print("Validation set size:", X_val.shape)
print("Test set size:", X_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Initialize and train
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Evaluate on validation set
y_val_pred = lr_model.predict(X_val)
mse = mean_squared_error(y_val, y_val_pred)
r2 = r2_score(y_val, y_val_pred)

print("Validation MSE:", mse)
print("Validation R² Score:", r2)

from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# ---------- Evaluation on Validation Set ----------
y_val_pred = lr_model.predict(X_val)

mse_val = mean_squared_error(y_val, y_val_pred)
rmse_val = np.sqrt(mse_val)
r2_val = r2_score(y_val, y_val_pred)

print("Validation Set Evaluation:")
print("MSE:", mse_val)
print("RMSE:", rmse_val)
print("R² Score:", r2_val)

# ---------- Evaluation on Test Set ----------
y_test_pred = lr_model.predict(X_test)

mse_test = mean_squared_error(y_test, y_test_pred)
rmse_test = np.sqrt(mse_test)
r2_test = r2_score(y_test, y_test_pred)

print("\nTest Set Evaluation:")
print("MSE:", mse_test)
print("RMSE:", rmse_test)
print("R² Score:", r2_test)

import matplotlib.pyplot as plt

plt.scatter(y_test, y_test_pred, alpha=0.6, color='teal')
plt.xlabel("Actual Loan Sanction Amount (USD)")
plt.ylabel("Predicted Loan Sanction Amount (USD)")
plt.title("Actual vs Predicted on Test Set")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Make plots more readable

plt.figure(figsize=(10, 6))

# -------------------------------
# 1. Histogram / Distribution Plots
# -------------------------------
numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns

df[numerical_cols].hist(figsize=(18, 12), bins=30, edgecolor='black')
plt.suptitle("Histogram / Distribution of Numerical Features", fontsize=16)
plt.tight_layout()
plt.show()

# -------------------------------
# 2. Scatter Plots
# -------------------------------
# Example 1: Income vs Loan Amount
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Income (USD)', y='Loan Sanction Amount (USD)', data=df, alpha=0.5)
plt.title("Income vs Loan Amount")
plt.grid(True)
plt.show()

# Example 2: Credit Score vs Loan Amount
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Credit Score', y='Loan Sanction Amount (USD)', data=df, alpha=0.5, color='darkorange')
plt.title("Credit Score vs Loan Amount")
plt.grid(True)
plt.show()

# -------------------------------
# 3. Correlation Heatmap
# -------------------------------
plt.figure(figsize=(16, 12))
corr = df[numerical_cols].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", square=True)
plt.title("Correlation Heatmap")
plt.show()

# -------------------------------
# 4. Actual vs Predicted Plot
# -------------------------------
y_test_pred = lr_model.predict(X_test)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_test_pred, alpha=0.5, color='green')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Ideal line
plt.xlabel("Actual Loan Sanction Amount")
plt.ylabel("Predicted Loan Sanction Amount")
plt.title("Actual vs Predicted Values")
plt.grid(True)
plt.show()

# -------------------------------
# 5. Residual Plot
# -------------------------------
residuals = y_test - y_test_pred

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test_pred, y=residuals, alpha=0.5, color='purple')
plt.axhline(0, color='red', linestyle='--')
plt.xlabel("Predicted Values")
plt.ylabel("Residuals")
plt.title("Residuals vs Predicted Values")
plt.grid(True)
plt.show()

# -------------------------------
# 6. Boxplots to Find Outliers
# -------------------------------
plt.figure(figsize=(8, 6))
sns.boxplot(x=df['Income (USD)'], color='lightblue')
plt.title("Boxplot - Income")
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x=df['Loan Sanction Amount (USD)'], color='lightgreen')
plt.title("Boxplot - Loan Sanction Amount")
plt.grid(True)
plt.show()

# -------------------------------
# 7. Bar Plot of Feature Coefficients
# -------------------------------
coefficients = lr_model.coef_
features = X_train.columns

coef_df = pd.DataFrame({'Feature': features, 'Coefficient': coefficients})
coef_df = coef_df.sort_values(by='Coefficient', ascending=False)

plt.figure(figsize=(12, 6))
sns.barplot(x='Coefficient', y='Feature', data=coef_df, palette='viridis')
plt.title("Feature Coefficients in Linear Regression")
plt.grid(True)
plt.show()

from sklearn.model_selection import KFold
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# K-Fold Cross Validation
kf = KFold(n_splits=5, shuffle=True, random_state=42)
lr_model = LinearRegression()

fold_results = []

for fold, (train_index, test_index) in enumerate(kf.split(X_scaled), start=1):
    X_train, X_test = X_scaled[train_index], X_scaled[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train model
    lr_model.fit(X_train, y_train)

    # Predict
    y_pred = lr_model.predict(X_test)

    # Metrics
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    print(f"\n----- Fold {fold} -----")
    print(f"MAE : {mae:.2f}")
    print(f"MSE : {mse:.2f}")
    print(f"RMSE: {rmse:.2f}")
    print(f"R²  : {r2:.4f}")

    fold_results.append({
        'Fold': fold,
        'MAE': mae,
        'MSE': mse,
        'RMSE': rmse,
        'R2': r2
    })

# Average results
avg_mae = np.mean([f['MAE'] for f in fold_results])
avg_mse = np.mean([f['MSE'] for f in fold_results])
avg_rmse = np.mean([f['RMSE'] for f in fold_results])
avg_r2 = np.mean([f['R2'] for f in fold_results])

print("\n===== Average Across All Folds =====")
print(f"Avg MAE : {avg_mae:.2f}")
print(f"Avg MSE : {avg_mse:.2f}")
print(f"Avg RMSE: {avg_rmse:.2f}")
print(f"Avg R²  : {avg_r2:.4f}")
